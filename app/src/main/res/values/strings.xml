<resources>
    <string name="app_name">All in one</string>
    <string name="logo1">Let`s get it</string>
    <string name="logo2">started!</string>
    <string name="pic_keys">keys</string>
    <string name="pic_info">info</string>
    <string name="button_menu">Menu</string>
    <string name="button_teor">Teor ver</string>
    <string name="button_back">BACK</string>
    <string name="btn_next">➡</string>
    <string name="btn_opersys">Operat system</string>
    <string name="btn_shem">Circuitry</string>
    <string name="update_check">Check for update or jerk off</string>

    <string-array name="teor_block">
        <item>Блок 1️⃣
            Теория вероятности
        Теория вероятности - это наука о случайных событиях и их характеристиках.ㅤㅤㅤㅤㅤ
        Любой из взаимоисключающих друг друга исходов данного опыта или явления называется элементраным исходом.(ЭИ)
        Событием называется некоторая совокупность элементарных исходов. Если ЭИ конечное число, то событием является любая совокупность элементарных исходов.
    ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
    Если событие наступает в результате любого элементарного исхода, то оно называется достоверным.ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
    Если событие не содержит ни одного ЭИ, то оно наз. невозможным.ㅤㅤㅤㅤ
    ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
            Событие называется детерминированным если его исход предопределён.ㅤㅤㅤㅤㅤㅤㅤㅤ
        Событие называется случайным если множество его ЭИ является собственным подмножеством множества всех элементарных исходов.
        Два события наз. равными если множества их элементарных исходов совпадает.ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
        Два события наз. несовместными если множества их элементарных исходов не пересекаются. В противном случае наоборот.
        Операции над событиями.ㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
        1. Сложение событийㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
        Суммой событий A и B называется событие C которое означает осуществление хотя бы одного из любых соб.ㅤㅤㅤㅤㅤ
        2. Произведение событийㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
        A и B наз. событие C которое означает одновременное осуществление обоих событий. A*B
        3. Разность событийㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
        Событие C называется разностью событий A и B если оно означает осуществление соб А при одновременном неосуществлении соб В.
        4. Дополнительная или противоположная событийㅤㅤㅤㅤㅤㅤㅤㅤㅤ
            Соб A(с чертой сверху) наз. дополнением противоположной соб. А если оно состоит из всех элементарных исходов данного опыта не входящее в соб. А.
        5. Следование событийㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
        Говорят, что событие В следует из события А если из осуществления события А следует осуществление В. А↪В
            Различные подходы к понятию вероятности
            Статистический подход
            Пусть событие А в серии n независимых испытаний произошло m раз, тогда m\n - называется jтносительной частотой соб. А в данной серии испытаний.
        </item>
        <item>Блок 2️⃣
                Условной вероятностью бла
        </item>
        <item>Блок 3️⃣
            бла б pft,fkcz сука бя
        </item>
        <item>Блок 4️⃣
            бла бл pft,fkcz сука бя
        </item>
        <item>Блок 5️⃣
            бла ба pft,fkcz сука бя
        </item>
        <item>Блок 6️⃣
            бла ла pft,fkcz сука бя
        </item>
        <item>Блок 7️⃣
            ба бла pft,fkcz сука бя
        </item>
        <item>Блок 8️⃣
            бл бла сука бя я использовал string-array чтобы ебанные блоки коллоквиума перелистывать. Моя счётчик count считает сколько ты клацаешь на бляцкую кнопку и соответственно всавляет текст с нужным блоком.
        </item>
    </string-array>

    <string-array name="operatsys_lec">
        <item> Стр. 1
            Операционные Системы. Основыㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
    Операционная система - комплекс управляющих и обрабатывающих программ, которые с одной стороны выступают как интерфейс между пользователями и приложениями и с другой стороны с аппаратным обеспечением, а также предназначены для управления устройствами и процессами, для эффективного распределения вычислительных ресурсов между процессами и организации надёжных вычислений
    ㅤㅤㅤㅤㅤㅤㅤㅤФункции ОСㅤㅤㅤㅤㅤㅤㅤ
    1. Предоставление интерфейсов пользователя для взаимодействия с аппаратурой.ㅤㅤㅤㅤ
    2. Эффективное распределение ресурсов между процессами, управление процессами.ㅤㅤㅤㅤ
    3. Управляет опперативной и внешней памятью.ㅤㅤㅤㅤ
    4. Управляет вводом выводом, обеспечение работы с переферийными устр-вами.ㅤㅤㅤㅤ
    5. Обеспечение выполнения программ.ㅤㅤㅤㅤ
    6. Обеспечение безопасности.ㅤㅤㅤㅤ
    7. Организация сетевого взаимодействия.ㅤㅤㅤㅤ
    8. Сохранение информации об ошибках системы.ㅤㅤㅤㅤ
    9. Параллельное и псевдопараллельное выполнение задач.ㅤㅤㅤㅤ
    Требования к ОС ㅤㅤㅤㅤ(╯°□°）╯︵ ┻━┻ㅤㅤㅤㅤㅤㅤㅤㅤ
    1. Маштабируемость.ㅤㅤㅤㅤ
    2. Переносимость.ㅤㅤㅤㅤ
    3. Совместимость.ㅤㅤㅤㅤ
    4. Надёжность.ㅤㅤㅤㅤ
    5. Производительность.ㅤㅤㅤㅤㅤㅤ
    Классификация по способу организаций вычислений:ㅤㅤㅤㅤㅤ
    1. Системы пакетной обработке - формирует пакет задач.ㅤㅤㅤㅤㅤ
    2. Системы разделения времени - используется несколькими пользователями.ㅤㅤㅤㅤ
    3. Системы реального времени - используется при решении задач нетерпящих задержек.ㅤㅤㅤㅤㅤㅤ
    По типу ядра:ㅤㅤㅤ
    4. С монолитным ядром.ㅤㅤㅤㅤ
    5. С микроядром.ㅤㅤㅤ
    6. С гибридным ядром.ㅤㅤㅤ
    7. Со смешанным ядром.ㅤㅤㅤ
    По особенностям использованного алгоритма управления процессором:ㅤㅤㅤㅤㅤ
    8. Однозадачные.ㅤㅤㅤㅤㅤㅤ
    9. Многозадачные:невытесняющей производительностью и вытесняющей производительностью.
    </item>
    <item> Стр. 2
        Структура ОС
Современные процессы имеют два режима работы: привелигированный и пользовательский.
В пользовательском режиме не доступны команды процессора, связанные с управлением аппартатным обеспечением, а также защитой оперативной памяти, аппаратным обеспечением и переключением режима работы процессора.
Компоненты ОС:
1.	Ядро.
2.	Драйверы.
3.	Системные библиотеки.
4.	Оболочки и утилиты.
5.	Загрузчик.(UEFI- микропрограмма встроенная в мат плату, которая управляет обородуванием на низком уровне и позволяет выполнить первоначальную настройку запуска пк).
Ядро ОС
Основыне понятия
Ядро - это (прграмма) центральная часть ОС, постоянно находящаяся в оперативной памяти и обеспечивающая приложениям координированный доступ к ресурсам, таким как: процессорное время, оперативная память, периферийные устройства и предоставляет сервисы файловой системы и сетевых протоколов.
Функции ядра
1.	Управление процессами.
2.	Управление памятью.
3.	Управление устройствами.
4.	Управление прерываниями(сигнал, который поступает процессору о наступлении какого-либо процесса).
5.	Выполнение операции ввода вывода.

Объект ядра - это блок пямяти, доступный только ядру для выполнения его целей, объект содержит: имя, класс защиты, счётчик пользователей, смещение в ОП и т.д.. Свойства объектов наследуются.
    </item>
    <item> Стр. 3
     Лекция 2
Типы архитектур ядер
Монолитное ядро работает в едином адресном пространстве, это такаая схема при которой все составные части являются одной целой программы.
Недостатки: 1) сбой в одном компоненте программы вызывает сбой всей программы. 2) Из-за применения процедурного программирования, который подразумевает наследование от предыдущего кода занимает много памяти, следовательно падает производительность.
Модульное ядро - это модификация архитектуры монолитных ядер , которая оддерживает механизм поддержки модулей поддерживающих аппаратное обеспечение динамически (без перезагрузки ОС) или статически, но модули работают также в едином адресном пространстве поэтому модульность осуществляется на уровне бинарного образе, а не на архитектурном уровне ядра. Для динамической подгрузки/выгрузки модулей используется интерфейс API.
Недостатки: работа в едином адресном пространстве, ограничения связанные с применением API интерфейса Плюсы: модульность выполнения кода, облегченная отладка.
Микроядро -современная архитектура ядра в котором присутствуют элементарные функции управления процессами и минимальный набор функций для управления оборудованием, большая часть работы осуществляется с помощью сервисных прграмм, которые являются специальными пользовательскими процессорами. Поэтому почти все драйвера и модули расположены в сервисных процессах и являются расширением ядра. Каждый модуль имеет своё адресное пространство. Такой тип архитектуры уменьшает размер ядра но скорость выполнения процессов и предоставления других услуг значительно меньшше чем в монолитных архитектурах
Достоинства:

1.	расширяемостью, которая присуща микроядерной операционной системе в очень высокой степени
2.	надежностью, так как каждый сервер выполняется в виде отдельного процесса в своей области памяти и таким образом защищен от других серверов операционной системы
3.	поддержкой распределенных вычислений, так как используются механизмы, аналогичные сетевым Недостатки:
4.	Малая производительность.

В ОС windows процессы, вынесенные на уровень пользователя называются сервисами, в ОС unix - демонами и работают в фоновом режиме
Экзоядро - тип ядра предоставляет только функции для взаимодействия между процессорами и безопасного выделения ресурсов, при этом API предоставляется внешними по отношению к ядру библиотеками.
Достоинства: доступ к устройствам на уровне контроллера;
Недостатки: нескольким прикладным программам нельзя предоставлять доступ для прямого управления памятью; низкоуровневый доступ затрудняет преносимость ОС.
Наноядро - выполняет обработку аппартных прерываний генерируемых устройствами компьютера. Результаты обработки передаёт вышестоящему ПО после обработки прерываний.
Достоинства:

1.	Простота реализации;
2.	Надёжность Недостатки:
3.	Так как большую часть работ выполняют драйвера устройтсв соответсвенно и код становится сложнее.

Гибридное ядро - модифицированные микроядра.
Смешанное ядро - комбинация разных типов архитектур ядер.
    </item>
    <item> Стр. 4
       Виды ОС
Сетевые ОС - сетевая операционная система – это операционная система, которая обеспечивает обработку, хранение и передачу данных в информационной сети.
Компоненты сетевой ОС:

1.	Сервер - предоставляет собстенные ресурсы и услуги в общее пользование;
2.	Клиентская часть - средство управления локальными ресурсами компьютера, которая содержит компонент запроса доступа к удалённым ресурсам и услугам и их использование, эта часть выполняет распознавание и перенаправление в сеть запросов к удалённым ресурсам от приложений и пользователям, называется редиректором запрос от приложения или пользователя поступает в локальной форме, а передаётся в сеть в форме соответсвующей требованиям сервера и вобратном действии выполняет тоже.
3.	Коммуникационная часть - обеспечивает адресацию и буферизацию сообщений, выбор маршрута передачи по сети, осуществляет надёжность передачи и т.д.
Типы сетевых ОС:

1.	Одноранговые - все компьютеры равны в правах доступа к ресурсам друг друга
2.	Двухранговые сети - сети, с выделенными серверами, которые не используются для выполнения текущих задач, а имеют специализированное назначение, например, сервер ббаз данных и т.д., при этом все другие ПК могут выполнять функции и клиента и сервера одновременно
ОС реального времени - это ОС в которой успешность работы любой программы зависит не только от её логической правильности, но и от времени, за которое она получила результат, если ситема не удовлетворяет врменным ограничениям, то должен быть зафиксирован сбой в её работе.
Типы ОСРВ:

1.	Жёсткая (hard) ОСРВ: ОС которая может обеспевчить требуемое время выполнения задачи даже в худших условиях, не допускают задержек в системе, так как это моет привести к потере актуальности результатов и авариям. К ним относят системы управления бортового оборудования, системы аварийной защиты и регистраторы аварийных событий

2.	Мягкая (soft) ОСРВ - может обеспечить требуемое время выполнения задач в среднем, характеризуются возможной задержкой реакции.
Лекция 3
Управление процессами
Процесс - это единица работы, требующая заявку на потребление системных ресурсов. Функции подсистемы управления процессами:
1.	Планирование выполнения процессов - распределние процессорного времени между несколькими одновременно существующими в системе процессорами
2.	Создание и уничтожение процессов
3.	Обеспечение процессов необходимыми системными ресурсами
4.	Обеспечение взаимодействия между процессами Процессы:
1.	Рождение - процессу распределяется адресное пространство которое загружается в программный код, выделяются стеки системных ресурсов и устанавливается начальное значение программного счётчика этого процесса
2.	Готовность - пассивное состояние процесса, когда он заблокирован в связи с внешними по отношению к нему обстоятельствами.
3.	Ожидание - пассивное состояние процесса, когда он заблокирован по своим внутренним причинам и ждёт осуществление некоторого события
4.	Исполнение - активное состояние процесса, при котором он обладает всеми необходимыми ресурсами и выполняется процессором
Выйти из состояния исполнения процесс может выйти по 3 причинам:

ОС прекратила его деятельность
Не может продолжить работы пока не наступит некоторое событие В результате возникновения прерывания в вычислительной системе
5.	Смерть или завершения работы

Контекст и дескриптор процесса
При создании процесса формируется некоторая структура данных, которая называется блоком управления процесса, который представляет собой модель процесса для ОС.
ПКБ состоит из контекста и дескпритора
Контекст - это содержимое всех регистров процессора необходимое для восстановления состояния его операционнй среды в случае возобновления выполнения процессов. Включает в себя регистровый системный и пользовательский контекст процесса
Регистр процессора - сверхбыстрая память внутри процессора предназначенная для хранения промежуточных результатов вычисления и содержащая данные необходимые для работы процессора такие как: уровни доступа, смещение базовых таблиц, регистры сегментов памяти и т.д.
Дескриптор - оперативная информация, такая как: id процесса, состояние, приоритет, место нахождения кодового сегмента и смещения в этом сегмента.
Чтобы процесс выполнялся он должен быть загружен в оперативную память, выполняется процессором. В очереди к ОП стоят дескрипторы отдельных процессов
Создать процесс со стороны ОС - это:

1.	Создать информационнуе структуры, описывающие данные структуры, то есть ПКБ
2.	Включить дескриптор нового процесса в очередь готовых процессов
3.	Загрузить кодовый сегмент процесса в оперативную память Виды процессов:
1.	Процесс родитель - процесс который инициировал создание нового процесса, а созданный им процесс будет процессов ребёнком
2.	Процесс зомби - дочерний процесс завершивший своё выполнение, но ещё присутствующий в списке процессов операционной системы, чтобы дать родительскому процессу считать код завершения.
Переключение контекста - для корректного переключения процессора с одного процесса на другой необходимо сохранить контекст исполняющегося процесса и восстановить контекст процесса на который будет переключен процессор.
    </item>
        <item> Стр. 5
           Лекция 4
Уровни клонирования процессов
1.	Долгосрочная
2.	Среднесрочная
3.	Краткосрочное
Параметры планирования
Все параметры планирования делятся на:

1.	Статические – такие, которые не меняются по ходу работы ОС (максимальные значения ресурса, количество переферийных устройств, объемы буферов). Это предельные значения ресурсов вычислительной системы: размер ОП, максимальный размер свопинга, кол-во подключённых устройств ввода вывода, информация о пользователе, который запустил процесс, приоритет процесса, предельное процессорное время на выполнение процессов и соотношение процессорного времени и времени, затрачиваемого необходимого на ввод/вывод.

2.	Динамические – такие, которые могут меняться. Они описывают кол-во свободных ресурсов на данный момент.
Промежуток времени непрерывного использования процессора носит на английском языке название CPU burst, а промежуток времени непрерывного ожидания ввода-вывода - I/O burst.
Количественные показатели динамических параметров: потерянное время M=T-t показывает долю процессорного времени или долю потерянного времени вобщем времени реакции, Отношение реактивности R=t/T показывает долю процессорного времени или долю потерянного времени в общем времени реакции, штрафное отношение P=T/t показывает, во сколько раз общее время выполнения процесса превышает необходимое время, где t - процессорное время, необходимое процессу для выполнения, T - длительность пребывания процесса в системе.
Виды алгоритмов планирования процессов
1.	Алгоритмы, основанные на квантовании.
Смена активного процесса происходит, если: процесс завершился и покинул систему, произошла ошибка, процесс перешёл в состояние ожидания
2.	Алгоритмы, основанные на приоритетах.
Приоритет - это число. Существуют алгоритмы на относительных приоритетах и на абсолютных приоритетах.
Вытесняющие и невытесняющие алгоритмы планирования
Невытесняющая многозадачность основана на относительных приоритетах. Вытесняющая многозадачность основана на абсолютных приоритетах.
Невытесняющая многозадачность - это способ планирования процессов, при котором активный процесс выполняется до тех пор, пока он сам, по собственной инициативе, не отдаст управление планировщику операционной системы для того, чтобы тот выбрал из очереди другой, готовый к выполнению процесс.
Вытесняющая многозадачность - это такой способ, при котором решение о переключении процессора с выполнения одного процесса на выполнение другого процесса принимается планировщиком операционной системы, а не самой активной задачей.
Механизм работы планировщика ос при вытесн. многозадачн.:
В очередь готовых процессов помещаются их дескрипторы, в соответствие с некоторым приоритетным алгоритмом, либо к поределённому разделу ОП, либо к общей ОП. Планировщик выбирает из очереди процесс с наивысшим приоритетом и загружает в ОП сначала дескриптор, контекст и тело процесса.
Транслятор преобразует код процесса, написанного на языке высокого уровня в низкоуравневый язык и процессор выполняет инструкции процесса, если в очереди процессов появляется процесс с более высоким приоритетом чем у активного, то процессор выполняет до конца текущую инструкцию, фиксирует контрольную точку останова, планировщик выгружает из ОП дескриптор и тело процесса и переводит его в состояние ожидания, далее процесс с более высоким приоритетом загружается в ОП по указанной выше схеме, в ходе жизненного цикла процесс может быть неоднократно прерван и заново выбран на исполнение. Из ОП процесс выгружается на жёсткий диск. Прерванный процесс может быть обратно возвращён в ОП, если он на данный момент имеет наивысший приоритет, при этом в ОП возращается его дескриптор и тело, и выполнение начинается со следующей инструкции после точки останова. Когда процесс полностью выполнился в ОП из Оп выгружается его дескриптор тело, а потом контекст.
        </item>
        <item> Стр. 5
Потоки
В мультипроцессорных системах поддерживается механизм многопоточной обработки: процесс делится на несколько потоков, которые выполняются псевдопараллельно или параллельно.
Потоки, относящиеся к одному процессу не изолированы друг от друга ка процессы, поэтому между ними легко организовать взаимодействие.
Потоки имеют одно и тоже адресное пространство, то есть разделяют одни и те же глобальные переменные. Каждый поток имеет доступ к каждому виртуальному адресу в рамках адресного простанства процесса,

поэтому один поток может использовать стек другого потока. При этом между потоками нет полной защиты. Потоки имеют собственные: программный счётчик, стек, регистры, состояние и потоки-потомки.
Потоки разделяют: адресное пространство, глобальные переменные, таймеры, симофоры, статическую информацию и открытые файлы.
Широко-многопоточная обработка применяется распределённых системах.
Лекция 5
Алгоритмы планирования
First-come First-Served
First-come First-Served - аналогичен алгоритму програ FIFO, это вид невытесняющего планирования. Достоинства:
Простота реализации Недостатки:
Алгоритм не применимдля систем разделения времени, так как среднее время отклика получается большим
Round Robin (RR)
Round Robin (RR) - вытесняющее планирование, при котором процессы выполняются циклически, при этом каждому процессу на выполнение выдаётся определённый квант времени.
Достоинства:

Данный алгоритм применим для ОС реального времени и идеально работает, при равенстве cpu burst и выделенного кванта времени.
Недостатки:
Если квант времени большой, то каждый процесс завершит выполнение до его окончания и алгоритм выродится в first-come, first-served.
Если величина кванта очень малая, то ОС будет тратить больше времени на переключение контекста, что снизит производительность системы.

        </item>
        <item> Стр. 6
Shorted-Job-First
Делятся на вытесняющие и невытесняющие.
Приоритет отдаётся процессам с наименьшим cpu burst, то есть с наименьшим временем выполнения. Самостоятелно посчитать среднее время ожидания и среднее полное время выполнения этого алгоритма. Среднее время ожидания:
Пусть t(n) - это величина n-ого cpu burst, T(n+1) - это предсказываемое значение n+1 cpu burst, a -нек величина от 0 до 1:
T(N+1)=at(n)+(1-a)T(n),
если T(N+1)=T(0), то первое слагаемое этот уравнения at(n) уитывает последнее поведение процесса, а второе слагаемо учитывает предыдущее поведение; процессов;
если а=0, то последнее поведение процесса не отслеживается, то есть оценивается его поведение до последнего;
если а=1, то оценивается его последнее поведение, а предыстория не учитывается; если а=0.5, то at(n)+(1-a)T(n) (посчитать самостоятельно)
Достоинства:

Если в системе больша часть будет процессов с коротким cpu burst, то система будет высокопроизводительной

Недостатки:
Чтобы применить этот алгоритм, необходимо знать длительность процесса, которое задано разработчиком, либо вычисляется методом экстраполяции.
Round-Robin SJF
Round-Robin SJF - это алг. RR с переупорядочиванием процессов в очереди в соответствии с оставшимя временем выполнения.
Лотырейное планирование
Процессам на доступ к различным системным ресурсам раздаются лотырейные билеты (самый требуемый - процессорное время), которые разыгрываются один раз в указанный промежуток времени и выигравший процесс получает квант процессорного времени.
Высокоприоритетным системным процессам раздаются дополнительноые билет, чтобы повысить их шансы на выполнение, чем у процесса больше лотерейнх билетом, тем выше у него шанс получить процессорное время. Новому процесса или вновь появившемся процессу выдаются лотерейные билтеы, в таком количестве, чтобы уравнять его шанс на получение процессорного времени в первом раунде.
Взаимодействующие между собой процессы могут обмениваться между собой билетами.
Гарантированное планирование
Пусть в системе имеется N-пользователей, при данном алгоритме каждый пользователь будет иметь в своём распоряжении 1/N процессорного времени, для каждого i-того пользователя Ti - время нахождения пользователя в системе, ti - суммарное проц. время, выделенное всем его процессам течение одного сеанса, для пользователя справедливо получение Ti/N проц. времени.
Если ti/N, то i-ый пользователь обделён проц. временем.
Если ti>>Ti/N, то i-ый пользователь получит слишком много проц. временем.
Знач. коэф справедливости для каждого пользователя будет высчитываться tiN/Ti, то есть система будет предоставлять очередной квант врмеени процессу с наименьшей величиной этого коэффициента.
Недостаток: у отдельных пользователей сеанс работы может висеть долгое время, в резултате чего его процессы будут получать неоправданно много процессорного времени.
Half-Life Round Robin
Каждому i-ому процессу присваивается некоторое приоритетное число P[i]=P[0]+U[i]/2, чем оно меньше тем выше приоритет процесса, новый процесс получает приоритет P[0] и каждый процесс связан с счётчиком процессорного времени U[i]=U[i]/2, начально значение U[i]=0.
Процесс с наименьшим значением U[i] получает квант времени q, по-окончанию кванта интервальный таймер выдаёт сигнал с прерыванием, по каждому такому сигналу счётчик U[i] активного процесса увеличивается на 1, когда процесс полностью завершил своё выполнение, пересчитываются счётчики всех активных и неактивных процессов по формуле U[i]=U[i]/2 и для всех процессов пересчитываются все приоритетные числа по формуле P[i]=P[0]+U[i]/2 и с получением новых значений модифицируется очередь. (Алгоритм с вытеснением и с приоритетом).
Highest penalty radio next
Алгоритм без вытеснения, в котором динамически переопределяются приоритеты. Каждый раз, когда освобождается процессор, то для готовых процессов в очереди вычисляются текущие штрафное отношение: p[i]=(w[i]+t[i])/t[i], i- номер процесса, w[i]- время, затраченное процессом на ожидание, t[i]- длительность процесса, предназначенная или прогнозируемая. Для нового процесса p[i]=0. Процессорное время даётся процессу, у которого наибольшее приоритетное число.
Недостаток: вычисление штрафного отношения при каждом вычислителном процессе, падает производительность; для коротких процессов HPRN переходит в HDN, в длинных в First-come First-Served
Selfish RR

Алгоритм с вытеснением. Все процессы делятся на новые и выбранные . Новые - не получали не разу квант времени, все остальные выбранные. Для нового процесса приоритетное число=0, которое потом возрастает. В конце каждого кванта времени пересчитываются приоритеты всех процессов, причём у новых процессов приоритет возрастае на величину dA, у выбранных на величину dB. Время отдаётся процессу с наивысшим приоритетом, время отдаётся процессу, который дольше всех стоял в очереди. При dB/dA=0 алг. превращается в RR, при dB/dA>=1 алг. превращается в FCFS, при 0/dA1 работает сам алгоритм.

        </item>
        <item> Стр. 7
Алгоритмы планирования ОСРВ (Оба на приоритетах) Динамический алгоритм планирования (EDF)
Приоритет процессам присавивается динамически причём наивысший приоритет отдаётся тому процессу, у которого осталось наименьшее время выполнения.
Статический алгоритм планирования (RMS)
Статический алгоритм планирования (RMS) - приоритетный алгоритм ОСРВ. Каждому процессу заранее назначается приоритет, приэтом процесс должени удовлетворять следующим условиям:
1.	процесс должен быть заверешен за предоставленное ему время;
2.	процессы не зависят друг от друга;
3.	каждому процессу требуются кванты времени равного размера;
4.	прерывание процесса происходит за ограниченное время.
Наивысший приоритет отдаётся процессам у которых наименьшее CPU-burst.
Лекция 5
Тупики или deadlock
Пусть 2 процессам в системе для выполнения их работы нужно 2 ресурса, например принтер и диск. После того как процесс A занял принтер, то есть установил блокирующую переменную, он был прерван, управление получил процесс B, который сначала занял диск, но при выполнении следующей команды был заблокирован, т.к. для дальнейшей работы ему нужен был ресурс - принтер, а он был занят процессом A, управление снова получил процесс A, который в соответствии со своей программой сделал попытку занять диск и был заблокирован, такая ситуация называется тупиком или deadlock-ом. В тупике могут участвовать 2 и более процессов, но в зависимости от соотношения скоростей процессов, они могу либо независимо использовать разделяемые ресурсы, либо строить очереди к разделяемым ресурсам, либо взаимоблокировать друг друга.
Тупики могут быть предотвращены в следующих случаях:

1.	При написании программ должны быть учтены соотношение скоростей взаимных процессов;
2.	С помощью динамического подхода, который заключается в применении определённых правил, при назначении ресурсов процессам;
3.	Монитор - это набор процедур, которые могут вызывать процессы, но они не имеют доступа к внутренним данным монитора, только 1 процесс может быть активным по отношению к монитору
Управление устройствами. Прерывания
Прерывание - механизм, который координирует параллельное функционирование отдельных устройств и реагирует на особые состояния, при работе процессора, путём принудительной передачи управления от выполняемой программы к системе далее в обработчик прерывания. Цель прерывания - реализация асинхронного режима функционирования с помощью аппаратно-программных средств системы.
Прерывания возникают в следующих случаях:

1.	Завершение операции ввода/вывода;
2.	Истечение заранее заданного интервала времени;

3.	Попытка деления на 0;
4.	Сбой в работе аппаратного устройства
Типы прерываний
Аппаратные (IRQ)
Аппаратные (IRQ) - события от периферийных устройств или события в микропроцессоре, возникающие в результате подачи сигнала от аппаратуры, который передаётся на специальный вход прерывания процессора. Аппаратные прерывания не координируются с работой ПО, когда оно возникает, процессор останавливает свою работу, выполняет обработку прерывание, а затем возвращается на место останова.
Аппаратные делятся на внутренние и внешние:

1.	Внешние прерывания инициируется периферийными устройствами;
2.	Внутренние - это те, что происходят в микро процессоре.

Внутренние прерывания ещё называются исключениями и вызываются синхронно выполнению программы, при появлении аварийной ситуации в ходе исполнения какой-то инструкции, то есть возникают в ходе выполнения тактов команды процессора, возникают в следующих случаях:
1.	при нарушении адресации, когда в адресной части выполняемой команды указан запрещённый или несуществующий адрес;
2.	при наличии в поле кода незадействованной двоичной комбинации;
3.	при делении на ноль;
4.	при переполнении или исчезновении счётчика команд;
5.	при возникновении ошибок чётности после проверки устройств аппаратуры средствами контроля.

Внешние прерывания являются асинхронными по отношению к потоку инструкций прерываемой программы, то есть возникают между выполнением двух соседних инструкций.
Виды внешних прерываний:

1.	Прерывания которые информируют систему о том, что требуемый сектор диска уже прочитан и его содержимое доступно программе;
2.	Прерывания которые информируют систему о том, что завершилась писать символа на принтере и необходимо выдать следующий символ;
3.	Прерывания которые информируют систему о том, что была нажата/отжата определённая клавиша на клавиатуре;
4.	Прерывания по нарушению питания;
5.	Прерывания по таймеру.

Виды внешних прерываний: Маскируемые (INTR) и немаскируемые (NMI) внешние прерывания.
Маскируемые прерывания - это тип отдельных сигналов прерывания, на который выставлен запрет для запуска обработчика прерывания от процессора.
Немаскируемые - это те, которые нельзя запретить.
        </item>
        <item> Стр. 8
Программные прерывания
Программные прерывания не являются асинхронными, процессор выполняет те же действия, что и при аппаратных прерываниях, но только это происходит в предсказуемые точки программы, там, где разработчики указал данную команду
Виды программных прерываний:

1.	Привилегированная команда в режиме пользователя;

2.	Указан адрес вне диапазона;
3.	Нарушение защиты памяти;
4.	Арифметическое переполнение;
5.	Выход за границу сегмента памяти.
Обработка прерываний
С каждым прерыванием связано число, называемое номером прерывания. Система распознаёт по номеру какое прерывание произошло и запускает соответствующий этому номеру обработчик прерывания, таким образом происходит принудительная передача управления от управляемой программы к системе, а далее к обработчику прерывания.
Векторы прерываний -адреса программ соответв. различным прерываниям собраны в таблицу векторов прерываний, которая занимает первый килобайт оперативной памяти в адресат от 0000:0000 до 0000:03FF. Таблица состоит из 256 элементов адресов обработчиков прерываний, эти адреса называются векторами прерываний. В первом слове элемента таблицы записано смещение, а во втором адрес сегмента обработчика прерывания. Такой адрес состоит из пары двух байтов слов, поэтому весь вектор занимает 4 байта.
Инициализация данной таблицы происходит через UEFI после тестирования аппаратуры и перед началом загрузки системы и захватывает частично при загрузке ОС.
        </item>
    </string-array>

    <string name="shem_text">1.Строение полупроводников. Электроно-дырочный p-n переходㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ
    Электронно-дырочным называют такой p-n переход, который образован двумя областями полупроводника с разными типами проводимости: электронной (n) и дырочной (p).
        Получают p-n переход с помощью диффузии или эпитаксии.ㅤㅤㅤㅤㅤㅤㅤ
    2.Устройство и работа полупроводникового диода. Разновидности диодов
    Полупроводниковым диодом называют прибор с одним p-n переходом, имеющим два вывода: анод А и катод К.
    ㅤㅤВ зависимости от назначения и свойств различают выпрямительные диоды, стабилитроны, высокочастотные диоды, импульсные диоды, варикапы, диоды Шоттки, светодиоды, фотодиоды, диодные оптроны и т. п
    ㅤㅤㅤㅤㅤㅤㅤㅤ3.Устройство и работа биполярного транзистора. Основные параметры, схемы
    включения и характеристики биполярных транзисторов.
    ㅤБиполярные транзисторы — это полупроводниковые приборы, выполненные на кристаллах со структурой p-n-p типа (а) или n-p-n типа (б) с тремя выводами, связанными с тремя слоями (областями): коллектор (К), база (Б) и эмиттер (Э).
    ㅤㅤㅤㅤㅤБаза Б — это средний тонкий слой, служащий для смещения эмиттерного и коллекторного переходов. Толщина базы должна быть меньше длины свободного пробега
носителей заряда. Эмиттер Э — наружный слой, источник носителей заряда с высокой концентрацией носителей, значительно бóльшей, чем в базе. Второй наружный
слой К, принимающий носителей заряда, называют коллектором.
Ток в таком транзисторе определяется движением зарядов двух типов: электронов
и дырок. Отсюда его название — биполярный транзистор.
    4.Устройство и работа полевого транзистора. Основные параметры и характеристики.
        Полевой транзистор — это полупроводниковый прибор, в котором ток стока (С) через полупроводниковый канал п- или р- типа управляется электрическим полем, воз
никающим при приложении напряжения между затвором (З) и истоком (И). Полевые транзисторы изготавливают:
l с управляющим затвором типа p-n перехода для использования в высокочастотных (до 12..18 ГГц) преобразовательных устройствах.
l с изолированным (слоем диэлектрика) затвором для использования в устройствах, работающих с частотой до 1..2 ГГц. Их изготавливают или со
встроенным каналом в виде МДП-структуры (см. их условное обозначение на
рис. 1.20, в и г), или с индуцированным каналом в виде МОП-структуры.
    5.Устройство и работа тиристора. Основные параметры и характеристики тиристоров.
        Тиристор — электропреобразовательный полупроводниковый прибор с тремя и более p-n переходами, обладающий способностью принудительного переключения из
одного устойчивого состояния (отсечки) в другое (насыщения).
Тиристоры подразделяются на диодные (динисторы), имеющие два вывода (анод А
и катод К), и триодные (тринисторы), имеющие три вывода (анод А, катод К и управляющий электрод У).
При отсутствии напряжения U y на управляющем электроде и при приложении
напряжения U a к аноду оба эмиттерных перехода ЭП (см. рис. 1.23, а) открыты, а коллекторный переход КП закрыт, и почти всё анодное напряжение U a приложено к переходу КП.
При увеличении напряжения Ua до значения напряжения отпирания Uот ток анода мал, а сопротивление прибора велико.
    6.Интегральные схемы.Разновидности и типы интегральных микросхем.
        Интегральная микросхема (ИМС) представляет собой устройство, в котором несколько элементов (резисторов, конденсаторов, диодов, транзисторов) соединены между
собой и образуют определенный функциональный узел (логический элемент, усилитель, генератор, стабилизатор напряжения и т. д.), изготовленный на общей основе
(подложке) в едином технологическом процессе.
Различают монолитные ИМС, в которых на общей полупроводниковой, например,
кремниевой подложке изготавливают все элементы, и гибридные ИМС, в которых на
общей диэлектрической подложке изготавливают только пассивные элементы (резисторы, конденсаторы), а активные элементы (диоды, транзисторы) представляют собой безкорпусные миниатюрные детали навесного монтажа. По типу используемых
транзисторов полупроводниковые ИМС принято подразделять на биполярные и МОП-ИМС.
    7.Однофазные и трёхфазные выпрямители переменного тока. Внешние характеристики выпрямителей.
        Однофазные выпрямители переменного тока широко применяют для питания различных устройств электронной аппаратуры. Мощность этих выпрямителей колеблется от
десятков до нескольких сотен ватт. Основными схемами однофазных выпрямителей являются: однополупериодная и двухполупериодная (мостовая или со средней точкой).
Однофазная однополупериодная схема выпрямления (рис. 2.2, а) с активной нагрузкой является простейшей из известных схем выпрямления. Она состоит из силового
трансформатора Тр, одного вентиля (диода) VD и нагрузки Rн. Первичная обмотка трансформатора включена в сеть переменного тока с напряжением u1; к вторичной обмотке с напряжением u2 последовательно подключены диод
и нагрузка.
    8.Сглаживающие фильтры. Стабилизаторы напряжения и тока.
        Сглаживающие фильтры предназначены для уменьшения пульсаций выпрямленного напряжения на нагрузке до значений, при которых не сказывается их отрицательное влияние на работу электронной аппаратуры. Они должны пропускать постоянную составляющую выпрямленного напряжения и заметно ослаблять его гармонические составляющие.
Действие фильтра по уменьшению пульсации напряжения (тока) на нагрузке характеризуется коэффициентом сглаживания kc, представляющим собой отношение
коэффициента пульсации на выходе выпрямителя qn1 (до фильтра) к коэффициенту
пульсации на нагрузке qn2 (после фильтра),ㅤㅤㅤㅤㅤㅤ
    9.Управляемые выпрямители переменного тока.ㅤㅤㅤㅤㅤㅤ
        Растёт группа потребителей энергии, которые нуждаются в регулируемом выходном
напряжении. Для питания таких потребителей применяют тиристорные выпрямители:
однофазные при малых токах потребления и трехфазные большой мощности.
На рис. 2.12, а приведена схема однофазного управляемого выпрямителя с выводом нулевой точки трансформатора. В качестве вентилей в выпрямителе использованы тиристоры VS1 и VS2.
    10.Назначение и классификация электронных усилителей. Основные характеристики
        Усилитель — устройство, увеличивающее мощность (напряжение, ток) входного сигнала за счет энергии внешнего источника питания посредством усилительных элементов (полупроводниковых приборов, электронных ламп и др.).
        В качестве источника питания усилителя используют стабильные источники энергии постоянного тока. Источник входного
сигнала (датчик) формирует изменяющееся
во времени напряжение u вх (ток iвх) различной амплитуды, частоты и формы. Нагрузка усилителя — устройство, которое можно представить в виде линейного пассивного двухполюсника. Сам усилитель с парой входных и парой выходных зажимов обычно представляют в виде нелинейного четырехполюсника вследствие нелинейности
характеристик входящих в него элементов.ㅤㅤㅤㅤㅤㅤ
    11.Типовая схема однокаскадного усилителя на биполярном транзисторе, включенного по схеме с общим эмиттером.
        на странице 62. МНЕ ЛЕНЬ ЯСНА
    12.Режимы работы усилительных каскадов. Каскадное соединение усилителей.
        В зависимости от положения рабочей точки а в режиме покоя на семействе выходных характеристик транзисторов и уровня входных сигналов (u вх, i вх) различают три
основных режима (или класса) работы усилителей: А, В и С.
Класс А характеризуется тем, что рабочую точку а выбирают посередине участка bc
линии нагрузки (рис. 3.11, а), а максимальное значение амплитуды переменной составляющей входного тока (тока базы i Б) не приводит к увеличению тока коллектора
iК за пределы участка bc. В этом случае нелинейные искажения усиливаемого сигнала
будут минимальными, т. е. при подаче на вход синусоидального напряжения (тока)
форма выходного напряжения u вых будет практически синусоидальной. Основной недостаток этого класса усиления — очень низкий КПД nnâûõâûõn IEIUPP //2 ==
η .
     Каскадное (последовательное) соединение усилителей используют для получения заданных высоких коэффициентов усиления по напряжению, току и мощности, которых невозможно достигнуть с помощью одного усилительного каскада. При каскадном соединении применяют различные схемы связи между каскадами, назначение которых состоит в согласовании напряжений, соответствующих режимам
покоя предыдущего и последующего усилителей. При этом должны выполняться соотношения:

    13.Усилители мощности на транзисторах.
        Усилители мощности предназначены для отдачи максимальной мощности в заданную
нагрузку при допустимых нелинейных и частотных искажениях. Они содержат один
или несколько каскадов усиления. Выходной (оконечный) каскад работает в режиме
больших сигналов и, следовательно, потребляет большую мощность от источника
питания. Он должен иметь достаточно высокий КПД.ㅤㅤㅤㅤㅤㅤ
    14.Операционные усилители. Инвентирующий и неинвентирующий операционный усилитель. Аналоговый компаратор на операционном усилителе.
        Операционный усилитель (ОУ) — это малогабаритный (в интегральном исполнении
отечественных серий К140, К544, К553, КР1040УД, КР1435 и др. и импортных серий
AD8041, OP275, LM339 и др.) многокаскадный усилитель постоянного тока с непосредственными связями между каскадами и большим коэффициентом усиления.
Операционные усилители предназначены как для усиления электрических сигналов, так и для осуществления различных операций над сигналами: сложение, вычитание, логарифмирование и др. Такие усилители имеют дифференциальный высокоомный вход, высокий коэффициент усиления, низкоомный (сравнительно мощный)
выход и сконструированы таким образом, что к ним могут быть подключены различные корректирующие цепи и цепи обратной связи.
    15.Операционные усилители. Дифференцирующий и интегрирующий операционный усилитель.</string>
</resources>